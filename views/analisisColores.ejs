<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>An치lisis Colores</title>



    <!-- CSS para imprimir -->
    <link
      rel="stylesheet"
      href="/css/psicologos/analisisColores.print.css"
      media="print" />
      <style>
        :root {
         --secondary: #D0E3FF;
          --third: #c1c1c1;
  --font-primary: #000;
  --font-secondary: #fff;
  --secondary-hover: #193858;
  --third-hover: #b1b1b1;
  --movilidad-header: #728575;
  --movilidad-text: #000;
}

.btn {
  padding: 0;
}

.btn-color--secondary {
  padding: 4px 28px;
  border-radius: 10px;
  font-size: 14px;
  text-align: center;
  background: var(--secondary);
  color: var(--font-secondary);
}

.btn-color--third {
  padding: 4px 24px;
  border-radius: 10px;
  font-size: 14px;
  text-align: center;
  background: var(--third);
  color: var(--font-primary);
}

.btn-color--third:hover {
  background: var(--third-hover);
  color: var(--font-primary);
}

.btn-color--secondary:hover {
  background: var(--secondary-hover);
  color: var(--font-secondary);
}

* {
  margin: 0;
  padding: 0;
  font-family: "Lato", sans-serif;
  box-sizing: border-box;
}

.main {
  min-height: 100vh;
  width: 100%;
  overflow: hidden;
  transition: all 0.35s ease-in-out;
  display: flex;
  flex-direction: row;
}

.nombre-aspirante-texto {
  font-size: 25px;
  font-weight: normal;
  text-align: center;
}

.text-center {
  font-size: 36px;
  font-style: normal;
  font-weight: 600;
}

h1,
h4 {
  margin-bottom: 15px;
}

.row {
  display: flex;
  justify-content: center;
  align-items: start;
  flex-wrap: wrap;
}

.col-md-4 {
  flex: 1;
  max-width: 30%;
  min-width: 250px;
}

.boton-container {
  width: 100%;
  text-align: left;
  margin-top: 60px;
  margin-bottom: 40px;
  padding-left: 15px;
}

.container .boton-regresar-abajo {
  position: static;
  display: inline-block;
  font-size: 16px;
  padding: 6px 24px;
  z-index: 1;
}

/* Fases colores */
.titulo-seccion {
  color: var(--secondary);
  font-size: 24px;
  font-weight: 600;
  margin-top: 1.5rem;
}

.prueba-colores-container {
  margin-top: 40px;
  margin-bottom: 40px;
}

.fase-titulo {
  font-size: 1.8rem;
  margin-top: 40px;
  margin-bottom: 20px;
  font-weight: 500;
  color: var(--secondary);
}

.colores-row {
  display: flex;
  justify-content: center;
  flex-wrap: nowrap;
  gap: 30px;
  margin-bottom: 50px;
  width: 100%;
}

.color-item-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 80px;
}

.color-box {
  width: 80px;
  height: 80px;
  border: 1px solid #ddd;
  border-radius: 10px;
}

.color-number {
  font-size: 2rem;
  font-weight: 600;
  margin-top: 10px;
}

/* Estilos para la seccion de movilidad */
/* Movimineto cards grafica y movilidad */
.chart-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.12);
  transform: translateY(-3px);
  border-color: #728575;
}

.chart-card {
  height: auto !important;
}
.chart-body {
  height: auto !important;
  padding-bottom: 1rem;
}

.movilidad-container {
  margin-top: 40px;
  margin-bottom: 40px;
}

.movilidad-container .card-text,
.movilidad-container .chart-body p {
  font-weight: bold;
}

.resultado-movilidad {
  font-size: 1.4rem;
  font-weight: 700;
  color: var(--movilidad-text);
  margin-top: 20px;
}

.interpretacion-movilidad {
  font-size: 1.6rem;
  font-weight: 700;
  color: #62868c;
  margin-top: 10px;
  text-align: center;
}

/* Estilos para dise침o de interpretaciones */
.interpretacion-container {
  margin-top: 40px;
  margin-bottom: 80px;
}

.interpretacion-horizontal {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 40px;
  justify-content: space-between;
}

.interpretacion-card {
  flex: 0 0 calc(50% - 10px);
  max-width: calc(50% - 10px);
  background-color: #ffffff;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  margin-bottom: 20px;
  overflow: hidden;
  min-height: 200px;
  display: flex;
  flex-direction: column;
}

@media (max-width: 992px) {
  .interpretacion-card {
    flex: 0 0 calc(100% - 15px);
    max-width: calc(100% - 15px);
  }
}

@media (max-width: 768px) {
  .interpretacion-card {
    flex: 0 0 100%;
    max-width: 100%;
  }
}

/* Movimineto cards texto */
.interpretacion-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  border-color: #728575;
}

.interpretacion-card .card-body {
  padding: 20px;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.interpretacion-seccion {
  margin-bottom: 15px;
  border-left: 3px solid #294969;
  padding-left: 12px;
}

.tipo-contenido {
  font-weight: 600;
  font-size: 0.95rem;
  margin-bottom: 8px;
  color: #294969;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.interpretacion-seccion p {
  text-align: justify;
  font-size: 0.9rem;
  line-height: 1.6;
  margin-bottom: 0;
  color: #333;
}

.interpretacion-horizontal::after {
  content: "";
  flex: 0 0 calc(33.333% - 20px);
  max-width: calc(33.333% - 20px);
}

@media (max-width: 992px) {
  .interpretacion-horizontal::after {
    flex: 0 0 calc(50% - 15px);
    max-width: calc(50% - 15px);
  }
}

/* Estilos para la seccion de personalidad y adaptacion */
/* Movimineto cards tablas*/
.table-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.12);
  transform: translateY(-3px);
  border-color: #728575;
}

.personalidad-y-adaptacion-container {
  margin-top: 40px;
  margin-bottom: 40px;
}

/* Estilos para la tarjeta de la grafica */
.chart-card {
  background-color: #fff;
  border-radius: 10px;
  border: 1px solid #dee2e6;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
  transition: all 0.3s ease;
  height: 100%;
  margin-bottom: 20px;
}

.chart-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.12);
  transform: translateY(-3px);
}

.chart-header {
  background-color: var(--secondary);
  color: var(--font-secondary);
  padding: 12px 15px;
  font-weight: 600;
}

.chart-header h6 {
  margin: 0;
  font-size: 1rem;
}

.chart-body {
  padding: 15px;
  height: calc(100% - 47px);
}

#graficaMixta {
  width: 100%;
  height: 100%;
  min-height: 350px;
  display: block;
}

/* Estilos para la tarjeta de la tabla */
.table-card {
  background-color: #fff;
  border-radius: 10px;
  border: 1px solid #dee2e6;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
  transition: all 0.3s ease;
  height: 100%;
}

.table-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.12);
  transform: translateY(-3px);
}

.table-header {
  background-color: var(--secondary);
  color: var(--font-secondary);
  padding: 12px 15px;
  font-weight: 600;
}

.table-header h6 {
  margin: 0;
  font-size: 1rem;
}

.table-responsive {
  padding: 10px;
  height: calc(100% - 47px);
  overflow: auto;
}

/* Estilos para la tabla comparativa */
.comparison-table {
  width: 100%;
  margin-bottom: 0;
}

.comparison-table th {
  font-weight: 600;
  color: var(--secondary);
  border-bottom: 2px solid var(--third);
  padding: 10px;
  font-size: 0.85rem;
  text-transform: uppercase;
  text-align: center;
}

.comparison-table td {
  padding: 10px 8px;
  vertical-align: middle;
  border-bottom: 1px solid #eee;
}

.comparison-table tr:last-child td {
  border-bottom: none;
}

.comparison-table tr:hover {
  background-color: rgba(41, 73, 105, 0.05);
}

.significado-cell {
  font-weight: 500;
  color: var(--secondary);
  max-width: 120px;
}

/* Estilos para las barras de progreso */
.progress-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.progress {
  flex-grow: 1;
  height: 8px;
  background-color: #e9ecef;
  border-radius: 10px;
  overflow: hidden;
}

.personalidad-bar {
  background-color: rgba(41, 73, 105, 0.8);
}

.adaptacion-bar {
  background-color: rgba(114, 133, 117, 0.8);
}

.percent-value {
  font-weight: 600;
  font-size: 0.8rem;
  color: #333;
  min-width: 36px;
  text-align: right;
}

/* Ajustes responsivos */
@media (max-width: 992px) {
  .chart-card,
  .table-card {
    margin-bottom: 20px;
  }
}

@media (max-width: 768px) {
  .significado-cell {
    max-width: 100px;
    font-size: 0.85rem;
  }

  .percent-value {
    font-size: 0.75rem;
    min-width: 32px;
  }

  #graficaMixta {
    min-height: 300px;
  }
}

@media (max-width: 576px) {
  .comparison-table th {
    padding: 8px 5px;
    font-size: 0.75rem;
  }

  .comparison-table td {
    padding: 8px 5px;
  }

  .significado-cell {
    max-width: 80px;
    font-size: 0.8rem;
  }

  #graficaMixta {
    min-height: 250px;
  }
}

.chart-body {
  height: 400px;
}

#graficaMixta {
  width: 100% !important;
  height: 100% !important;
}

.fullHeight {
      min-height: 110vh;
      margin-top: 5px;
    }
  </style>
  </head>
  <%- include('includes/_navbarP.ejs') %>
  <body class="">
    <section class="section fullHeight has-background-warning">
        <div class="container is-max-desktop">
          <div class="columns has-text-centered">
            <div class="column">
              <h1 class="title is-2 has-text-weight-semibold">An치lisis Prueba Colores</h1> <br>
            </div>
          </div>
            <div class="title has-text-weight-semibold">Respuestas de: <%= aspirante.nombres%> 
              <%= aspirante.apellidoPaterno %> <%= aspirante.apellidoMaterno%>
            </div> 
            
            <!-- Fases de colores -->
            <div class="prueba-colores-container">
                <h5 class="subtitle is-4 has-text-weight-semibold">Selecci칩n por fases:</h5>
                <br>
                <h2 class="title is-5 has-text-weight-semibold">Fase 1</h2>
                <div class="colores-row">
                    <% for(let i = 0; i < 8; i++) { %>
                        <div class="color-item-container">
                            <% 
                            const colorEnPosicion = seleccionesFase1.find(s => s.posicion === i);
                            %>
                            <div class="color-box" data-color="<%= colorEnPosicion ? colorEnPosicion.hexColor : '#f8f9fa' %>"></div>
                            <div class="color-number"><%= colorEnPosicion ? colorEnPosicion.numeroColor : '-' %></div>
                        </div>
                    <% } %>
                </div>
                
                <h2 class="title is-5 has-text-weight-semibold">Fase 2</h2>
                <div class="colores-row">
                    <% for(let i = 0; i < 8; i++) { %>
                        <div class="color-item-container">
                            <% 
                            const colorEnPosicion = seleccionesFase2.find(s => s.posicion === i);
                            %>
                            <div class="color-box" data-color="<%= colorEnPosicion ? colorEnPosicion.hexColor : '#f8f9fa' %>"></div>
                            <div class="color-number"><%= colorEnPosicion ? colorEnPosicion.numeroColor : '-' %></div>
                        </div>
                    <% } %>
                </div>
            </div>
            
            <!-- Seccion de movilidad -->
            <div class="movilidad-container">
                <h5 class="subtitle is-4 has-text-weight-semibold">An치lisis de Movilidad</h5>
                <hr>
                
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="chart-card">
                            <div class="chart-header">
                                <h5 class="mb-0 subtitle is-5">Resultado de Movilidad</h5>
                            </div>
                            <div class="chart-body">
                                <p class="card-text">Positivos: +<%= movilidad.positivos %></p>
                                <p class="card-text">Negativos: -<%= movilidad.negativos %></p>
                                <h4 class="resultado-movilidad">MOVILIDAD = (+<%= movilidad.positivos %> -<%= movilidad.negativos %>)</h4>
                                <h3 class="interpretacion-movilidad"><%= interpretacionMovilidad %></h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Seccion de personalidad y adaptacion -->
            <div class="personalidad-y-adaptacion-container">
                <h5 class="titulo-seccion">Personalidad Y Adaptaci칩n Al Medio</h5>
                <hr>
                
                <div class="row g-4 mt-3">
                    <div class="col-12">
                        <div class="chart-card">
                            <div class="chart-header">
                                <h6>Gr치ficas</h6>
                            </div>
                            <div class="chart-body">
                                <canvas id="graficaMixta"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="table-card">
                            <div class="table-header">
                                <h6>Resultados Detallados</h6>
                            </div>
                            <div class="table-responsive">
                                <table class="table comparison-table">            
                                    <thead>
                                        <tr>
                                            <th>Significado</th>
                                            <th>Personalidad</th>
                                            <th>Adaptaci칩n</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <%
                                        const todosSignificados = [
                                            "Participaci칩n",
                                            "Paciencia",
                                            "Productividad",
                                            "Empuje/Agresividad",
                                            "Sociabilidad",
                                            "Creatividad",
                                            "Vigor",
                                            "Satisfacci칩n"
                                        ];
                                        
                                        function obtenerColorBarra(porcentaje) {
                                            if (porcentaje === 90) return '#a8e6a1'; // Verde claro
                                            if (porcentaje >= 80) return '#2e7d32'; // Verde oscuro
                                            if (porcentaje >= 70) return '#4fc3f7'; // Azul celeste
                                            if (porcentaje >= 60) return '#ff9800'; // Naranja
                                            return '#e53935'; // Rojo
                                        }
                                  
                                        for (let significado of todosSignificados) {
                                            const personalidad = resultadosFase1.find(c => c.significado === significado);
                                            const adaptacion = resultadosFase2.find(c => c.significado === significado);
                                            const personalidadVal = personalidad ? personalidad.porcentaje : 0;
                                            const adaptacionVal = adaptacion ? adaptacion.porcentaje : 0;
                                        %>
                                        <tr>
                                            <td class="significado-cell"><%= significado %></td>
                                            <td>
                                                <div class="progress-container">
                                                    <div class="progress">
                                                        <div class="progress-bar personalidad-bar" role="progressbar" 
                                                            style="width: <%= personalidadVal %>%; background-color: <%= obtenerColorBarra(personalidadVal) %>" 
                                                            aria-valuenow="<%= personalidadVal %>" aria-valuemin="0" aria-valuemax="100">
                                                        </div>
                                                    </div>
                                                    <span class="percent-value"><%= personalidadVal %>%</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="progress-container">
                                                    <div class="progress">
                                                        <div class="progress-bar adaptacion-bar" role="progressbar" 
                                                        style="width: <%= adaptacionVal %>%; background-color: <%= obtenerColorBarra(adaptacionVal) %>" 
                                                        aria-valuenow="<%= adaptacionVal %>" aria-valuemin="0" aria-valuemax="100">
                                                    </div>   
                                                </div>                                                
                                                    <span class="percent-value"><%= adaptacionVal %>%</span>
                                                </div>
                                            </td>
                                        </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Secci칩n de interpretaci칩n -->
            <div class="interpretacion-container">
                <h5 class="titulo-seccion">Interpretaci칩n</h5>
                <hr>

                <div class="interpretacion-horizontal">
                    <% 
                    let textoPersonalidad = ''; 
                    let textoAdaptacion = '';

                    for (let i = 0; i < parejas.length; i++) { 
                        const c = parejas[i];
                        const mostrarFase1 = c.zonas.fase1 && c.zonas.fase1 !== 'N/A';
                        const mostrarFase2 = c.zonas.fase2 && c.zonas.fase2 !== 'N/A';

                        // Eliminar las etiquetas <p> usando expresi칩n regular
                        const eliminarEtiquetasP = (texto) => texto.replace(/<p>/g, '').replace(/<\/p>/g, '');

                        if (mostrarFase1) {
                            textoPersonalidad += ` ${eliminarEtiquetasP(c.texto.fase1)}`;
                        }
                        
                        if (mostrarFase2) {
                            textoAdaptacion += ` ${eliminarEtiquetasP(c.texto.fase2)}`;
                        }                        
                    }

                    // Mostrar una caja para Personalidad si hay texto
                    if (textoPersonalidad) { 
                    %>
                        <div class="interpretacion-card">
                            <div class="card-body">
                                <div class="interpretacion-seccion">
                                    <h6 class="tipo-contenido">Personalidad</h6>
                                    <%= textoPersonalidad %>
                                </div>
                            </div>
                        </div>
                    <% } %>

                    <!-- Mostrar una caja para Adaptaci칩n al medio si hay texto -->
                    <% if (textoAdaptacion) { %>
                        <div class="interpretacion-card">
                            <div class="card-body">
                                <div class="interpretacion-seccion">
                                    <h6 class="tipo-contenido">Adaptaci칩n al medio</h6>
                                    <%= textoAdaptacion %>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>

            <div class="boton-container">
                <a class="btn btn-color--third boton-regresar-abajo"
                href="/psicologa/consultaRespuestasColoresAspirante/<%= idUsuario%>/6"
                >Regresar</a>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
            document.addEventListener('DOMContentLoaded', function() {
        const datosFase1 = <%- JSON.stringify(resultadosFase1) %>; // Personalidad
        const datosFase2 = <%- JSON.stringify(resultadosFase2) %>; // Adaptaci칩n al medio

        // Obtener todos los significados 칰nicos
        const todosSignificados = [
            "Participaci칩n",
            "Paciencia",
            "Productividad",
            "Empuje/Agresividad",
            "Sociabilidad",
            "Creatividad",
            "Vigor",
            "Satisfacci칩n"
        ];

        const personalidadData = todosSignificados.map(significado => {
            const item = datosFase1.find(c => c.significado === significado);
            return item ? item.porcentaje : 0;
        });

        const adaptacionData = todosSignificados.map(significado => {
            const item = datosFase2.find(c => c.significado === significado);
            return item ? item.porcentaje : 0;
        });

        const getColor = (valor) => {
            if (valor === 90) return '#a8e6a1'; // Verde claro
            if (valor >= 80) return '#2e7d32'; // Verde oscuro
            if (valor >= 70) return '#4fc3f7'; // Azul celeste
            if (valor >= 60) return '#ff9800'; // Naranja
            return '#e53935'; // Rojo
        };

        const personalidadColors = personalidadData.map(valor => getColor(valor));
        const adaptacionColors = adaptacionData.map(valor => getColor(valor));

        const ctx = document.getElementById('graficaMixta');
        const mixedChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: todosSignificados,
                datasets: [
                    {
                        label: 'Personalidad',
                        data: personalidadData,
                        backgroundColor: personalidadColors,
                        borderColor: personalidadColors,
                        borderWidth: 1,
                        borderRadius: 4,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    },
                    {
                        label: 'Adaptaci칩n al medio',
                        data: adaptacionData,
                        backgroundColor: adaptacionColors,
                        borderColor: adaptacionColors,
                        borderWidth: 1,
                        borderRadius: 4,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false, 
                    },
                    tooltip: {
                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                        titleColor: '#333',
                        bodyColor: '#333',
                        bodyFont: {
                            size: 13,
                            family: "'Lato', sans-serif"
                        },
                        titleFont: {
                            size: 14,
                            weight: 'bold',
                            family: "'Lato', sans-serif"
                        },
                        padding: 12,
                        borderColor: 'rgba(0, 0, 0, 0.1)',
                        borderWidth: 1,
                        displayColors: true,
                        boxWidth: 10,
                        boxHeight: 10,
                        boxPadding: 3,
                        usePointStyle: true,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${context.parsed.y}%`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            font: {
                                family: "'Lato', sans-serif",
                                size: 11
                            },
                            color: '#666',
                            padding: 8,
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            font: {
                                family: "'Lato', sans-serif",
                                size: 11
                            },
                            color: '#666',
                            padding: 8
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });
    });
    </script>

    <!-- Poner colores desde data-color -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elegir todos los cuadros de color que tienen data-color
            const colorBoxes = document.querySelectorAll('.color-box[data-color]');
            
            // Pone el color de fondo
            colorBoxes.forEach(box => {
                box.style.backgroundColor = box.getAttribute('data-color');
            });
        });
    </script>

    <!-- Script para boton de imprimir -->
    <script>
            document.addEventListener('DOMContentLoaded', function() {
        // Definir estilos del boton
        const buttonStyles = {
            className: 'btn btn-color--secondary',
            innerHTML: 'Imprimir An치lisis',
            style: {
            padding: '6px 24px',
            fontSize: '16px'
            }
        };
        
        // Buscar el contenedor
        let container = document.querySelector('.boton-container');
        
        if (!container) {
            // Si no existe, crear uno nuevo
            container = document.createElement('div');
            container.className = 'boton-container';
            
            // Estilos para el nuevo contenedor
            Object.assign(container.style, {
            display: 'flex',
            justifyContent: 'flex-end',
            marginTop: '60px',
            marginBottom: '40px',
            width: '100%'
            });
            
            // Insertar en la pag
            const mainContainer = document.querySelector('.container');
            if (mainContainer) {
            mainContainer.appendChild(container);
            }
        } else {
            // Ajustar el contenedor que existe
            Object.assign(container.style, {
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            width: '100%'
            });
        }
        
        // Crear boton de imprimir
        const printButton = document.createElement('button');
        
        // Poner estilos y propiedades
        printButton.className = buttonStyles.className;
        printButton.innerHTML = buttonStyles.innerHTML;
        Object.assign(printButton.style, buttonStyles.style);
        
        // Poner funcion de imprimir
        printButton.addEventListener('click', () => window.print());
        
        // Agregar al contenedor
        container.appendChild(printButton);
        });
    </script>
</body>
</html>