<%- include('includes/_navbarP')%>
<style>
  .fullHeight {
    min-height: 160vh;
    margin-top: 20px;
  }
  @media print {
    .navbar,
    .footer,
    .descargar,
    footer {
      display: none;
    }
  }
</style>
<div class="section fullHeight">
  <div class="container is-max-desktop mt-5">
    <div class="title has-text-weight-semibold mb-2">
      Respuestas de: <%= datos.nombres %> <%= datos.apellidoPaterno %> <%=
      datos.apellidoMaterno %>
    </div>
    <div class="subtitle">
      Grupo: <%= grupo.posgrado %> <%= grupo.generacion%>
    </div>
    <br />
    <div class="subtitle has-text-centered"><%= prueba %></div>
    <div id="IM"></div>

    <div class="has-items-centered">
      <canvas id="graph"> </canvas>
    </div>
    <% if (prueba === 'El inventario de Percepción Kostick'){ %>
    <div class="columns">
      <div class="column">
        <table class="table">
          <thead>
            <tr>
              <th>Dimensiones de comportamiento</th>
              <th>Factores</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>Adaptación al Trabajo</th>
              <td>C D R</td>
            </tr>
            <tr>
              <th>Naturaleza social</th>
              <td>O B S X</td>
            </tr>
            <tr>
              <th>Modo de Vida</th>
              <td>V T</td>
            </tr>
            <tr>
              <th>Liderazgo</th>
              <td>I P L</td>
            </tr>
            <tr>
              <th>Grado de Energía</th>
              <td>A G N</td>
            </tr>
            <tr>
              <th>Subordinación</th>
              <td>W F</td>
            </tr>
            <tr>
              <th>Naturaleza Emocional</th>
              <td>K E Z</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    <%}%>

    <div id="Interpretacion">
      <div class="title has-text-weight-semibold">Interpretación</div>
      <div id="textos"></div>
    </div>
  </div>
  <br />
  <div class="columns">
    <div class="column has-text-centered">
      <button
        class="button descargar is-primary has-text-warning"
        onclick="descargar()">
        Descargar
      </button>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script>
  function descargar() {
    window.print();
  }
</script>

<script>
  function insertarInterpretacionKostick(valores, interpretaciones) {
    const interpretacionDiv = document.getElementById("textos");

    // Interpretación para extremos

    let i = 0;

    // SUBORDINACIÓN ----------------------------------------------

    if (
      valores.W >= 70 ||
      valores.W <= 20 ||
      valores.F >= 70 ||
      valores.F <= 20
    ) {
      const s = document.createElement("div");
      s.className = "subtitle";
      s.textContent = "Subordinación";
      interpretacionDiv.appendChild(s);

      // W
      if (valores.W >= 70) {
        i = 38;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.W <= 20) {
        i = 39;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // F
      if (valores.F >= 70) {
        i = 36;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.F <= 20) {
        i = 37;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }

    // NATURALEZA EMOCIONAL ----------------------------------------------
    if (
      valores.K >= 70 ||
      valores.K <= 20 ||
      valores.E >= 70 ||
      valores.E <= 20 ||
      valores.Z >= 70 ||
      valores.Z <= 20
    ) {
      const ne = document.createElement("div");
      ne.className = "subtitle";
      ne.textContent = "Naturaleza Emocional";
      interpretacionDiv.appendChild(ne);

      // K

      if (valores.K >= 70) {
        i = 34;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.K <= 20) {
        i = 35;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // E
      if (valores.E >= 70) {
        i = 32;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.E <= 20) {
        i = 33;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // Z
      if (valores.Z >= 70) {
        i = 30;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.Z <= 20) {
        i = 31;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
    // ADAPTACION AL TRABAJO ----------------------------------------------
    if (
      valores.C >= 70 ||
      valores.C <= 20 ||
      valores.D >= 70 ||
      valores.D <= 20 ||
      valores.R >= 70 ||
      valores.R <= 20
    ) {
      const aat = document.createElement("div");
      aat.className = "subtitle";
      aat.textContent = "Adaptación al Trabajo";
      interpretacionDiv.appendChild(aat);

      // C

      if (valores.C >= 70) {
        i = 28;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.C <= 20) {
        i = 29;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // D
      if (valores.D >= 70) {
        i = 26;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.D <= 20) {
        i = 27;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // R
      if (valores.R >= 70) {
        i = 24;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.R <= 20) {
        i = 25;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
    // NATURALEZA SOCIAL ----------------------------------------------
    if (
      valores.X >= 70 ||
      valores.X <= 20 ||
      valores.S >= 70 ||
      valores.S <= 20 ||
      valores.B >= 70 ||
      valores.B <= 20 ||
      valores.O >= 70 ||
      valores.O <= 20
    ) {
      const ns = document.createElement("div");
      ns.className = "subtitle";
      ns.textContent = "Naturaleza Social";
      interpretacionDiv.appendChild(ns);

      // O
      if (valores.O >= 70) {
        i = 22;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.O <= 20) {
        i = 23;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // B
      if (valores.B >= 70) {
        i = 20;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.B <= 20) {
        i = 21;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // S
      if (valores.S >= 70) {
        i = 18;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.S <= 20) {
        i = 19;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // X
      if (valores.X >= 70) {
        i = 16;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.X <= 20) {
        i = 17;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
    // MODO DE VIDA ----------------------------------------------

    if (
      valores.T >= 80 ||
      valores.T <= 10 ||
      valores.V >= 70 ||
      valores.T <= 20
    ) {
      const mdv = document.createElement("div");
      mdv.className = "subtitle";
      mdv.textContent = "Modo de Vida";
      interpretacionDiv.appendChild(mdv);

      // V
      if (valores.V >= 70) {
        i = 14;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.V <= 20) {
        i = 15;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // T
      if (valores.T >= 80) {
        i = 12;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.T <= 10) {
        i = 13;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
    // LIDERAZGO ----------------------------------------------
    if (
      valores.L >= 70 ||
      valores.L <= 20 ||
      valores.P >= 70 ||
      valores.P <= 10 ||
      valores.I >= 70 ||
      valores.L <= 20
    ) {
      const l = document.createElement("div");
      l.className = "subtitle";
      l.textContent = "Liderazgo";
      interpretacionDiv.appendChild(l);

      // I
      if (valores.I >= 70) {
        i = 10;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.I <= 20) {
        i = 11;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // P
      if (valores.P >= 70) {
        i = 8;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.P <= 10) {
        i = 9;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      //L
      if (valores.L >= 70) {
        i = 6;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.L <= 20) {
        i = 7;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
    // GRADO DE ENERGIA ----------------------------------------------
    if (
      valores.N >= 70 ||
      valores.N <= 20 ||
      valores.G >= 70 ||
      valores.G <= 20 ||
      valores.A >= 70 ||
      valores.A <= 20
    ) {
      const gde = document.createElement("div");
      gde.className = "subtitle";
      gde.textContent = "Grado de Energía";
      interpretacionDiv.appendChild(gde);

      // A
      if (valores.A >= 70) {
        i = 4;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.A <= 20) {
        i = 5;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // G
      if (valores.G >= 80) {
        i = 2;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.G <= 20) {
        i = 3;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }

      // N
      if (valores.N >= 70) {
        i = 0;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      } else if (valores.N <= 20) {
        i = 1;

        const positivo = document.createElement("p");
        positivo.textContent = interpretaciones[i].positivo;
        interpretacionDiv.appendChild(positivo);

        const negativo = document.createElement("p");
        negativo.textContent = interpretaciones[i].negativo;
        interpretacionDiv.appendChild(negativo);
      }
    }
  }
</script>

<script class="grafica">
                   const valores = <%- JSON.stringify(valores) %>;
                   let data;
                   const ctx = document.getElementById("graph").getContext("2d");
                   const prueba = <%- JSON.stringify(prueba) %>;

                   if (prueba === "El inventario de Percepción Kostick") {
                     const interpretaciones = <%- JSON.stringify(interpretaciones) %>;
                     const descripcionesKostickBaja = {
                     "C": "Desordenada",
                     "D": "No Detallista",
                     "R": "Práctico",
                     "O": "No Nec. Afecto",
                     "B": "Individualista",
                     "S": "Retraído",
                     "X": "Reservado",
                     "V": "Trabajo de Oficina",
                     "T": "No Activo",
                     "I": "Lento",
                     "P": "Sin Don de Mando",
                     "L": "Sin Liderazgo",
                     "A": "Conformista",
                     "G": "No es Esfuerza",
                     "N": "No Persevera",
                     "W": "Se Ajusta a Cambios",
                     "F": "Rebelde",
                     "K": "Pasivo",
                     "E": "Expresivo",
                     "Z": "Nec. de Estabilidad"
                    };
                    const descripcionesKostickAlta = {
                     "C": "Tipo Organizado",
                     "D": "Trabaja con Detalles",
                     "R": "Tipo Teórico",
                     "O": "Nec. Afecto",
                     "B": "Nec. Pertenencia",
                     "S": "Extensión Social",
                     "X": "Nec. Reconocimiento",
                     "V": "Vigor Físico",
                     "T": "Activo",
                     "I": "Impulsivo",
                     "P": "Necesidad de Controlar",
                     "L": "Liderazgo",
                     "A": "Nec. de Logro",
                     "G": "Tenaz e intensp",
                     "N": "Perseverante",
                     "W": "Nec. de reglas",
                     "F": "Sumiso",
                     "K": "A la Defensiva",
                     "E": "Inhibido",
                     "Z": "Nec. de Cambio"
                    };
                      data = {
                       labels: [
                         "C",
                         "D",
                         "R",
                         "O",
                         "B",
                         "S",
                         "X",
                         "V",
                         "T",
                         "I",
                         "P",
                         "L",
                         "A",
                         "G",
                         "N",
                         "W",
                         "F",
                         "K",
                         "E",
                         "Z",
                       ],
                       datasets: [
                         {
                           label: "Gráfico de Resultados Kostick",
                           data: [
                             valores.C,
                             valores.D,
                             valores.R,
                             valores.O,
                             valores.B,
                             valores.S,
                             valores.X,
                             valores.V,
                             valores.T,
                             valores.I,
                             valores.P,
                             valores.L,
                             valores.A,
                             valores.G,
                             valores.N,
                             valores.W,
                             valores.F,
                             valores.K,
                             valores.E,
                             valores.Z,
                           ],
                           backgroundColor: [
                             "rgba(173, 216, 230, 0.7)",
                             "rgba(173, 216, 230, 0.7)",
                             "rgba(173, 216, 230, 0.7)",
                             "rgba(70, 130, 180, 0.7)",
                             "rgba(70, 130, 180, 0.7)",
                             "rgba(70, 130, 180, 0.7)",
                             "rgba(70, 130, 180, 0.7)",
                             "rgba(135, 206, 235, 0.7)",
                             "rgba(135, 206, 235, 0.7)",
                             "rgba(30, 144, 255, 0.7)",
                             "rgba(30, 144, 255, 0.7)",
                             "rgba(30, 144, 255, 0.7)",
                             "rgba(0, 0, 205, 0.7)",
                             "rgba(0, 0, 205, 0.7)",
                             "rgba(0, 0, 205, 0.7)",
                             "rgba(65, 105, 225, 0.7)",
                             "rgba(65, 105, 225, 0.7)",
                             "rgba(25, 25, 112, 0.7)",
                             "rgba(25, 25, 112, 0.7)",
                             "rgba(25, 25, 112, 0.7)",
                           ],
                           borderColor: [
                             "rgba(173, 216, 230, 1)",
                             "rgba(173, 216, 230, 1)",
                             "rgba(173, 216, 230, 1)",
                             "rgba(70, 130, 180, 1)",
                             "rgba(70, 130, 180, 1)",
                             "rgba(70, 130, 180, 1)",
                             "rgba(70, 130, 180, 1)",
                             "rgba(135, 206, 235, 1)",
                             "rgba(135, 206, 235, 1)",
                             "rgba(30, 144, 255, 1)",
                             "rgba(30, 144, 255, 1)",
                             "rgba(30, 144, 255, 1)",
                             "rgba(0, 0, 205, 1)",
                             "rgba(0, 0, 205, 1)",
                             "rgba(0, 0, 205, 1)",
                             "rgba(65, 105, 225, 1)",
                             "rgba(65, 105, 225, 1)",
                             "rgba(25, 25, 112, 1)",
                             "rgba(25, 25, 112, 1)",
                             "rgba(25, 25, 112, 1)",
                           ],
                           borderWidth: 1,
                         },
                       ],
                     };

                     const config = {
      type: "bar",
      data: data,
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: "Valores",
            },
          },
          x: {
            title: {
              display: true,
              text: "Factores",
            }
          }
        },
        plugins: {
          legend: {
            display: false // Oculta la leyenda del label 'Ventas'
          },
          annotation: {
            annotations: [
              {
                type: 'line',
                yMin: 40,
                yMax: 60,
                borderColor: 'rgb(255, 0, 255)',
                borderWidth: 2,
                borderDash: [6, 6],
                label: {
                  content: 'Límite 40',
                  enabled: true,
                  position: 'center'
                }
              },
            ]
          }
        }
      },
      plugins: [
        {
          id: 'etiquetasDuales',
          afterDraw(chart) {
            const ctx = chart.ctx;
            const xAxis = chart.scales.x;
            const baseY = chart.scales.y.getPixelForValue(0);
            const topY = chart.chartArea.top;

            ctx.save();
            ctx.font = "bold 12px Arial";
            ctx.fillStyle = "#fffff";

            chart.data.datasets.forEach(dataset => {
              dataset.data.forEach((value, index) => {
                const bar = chart.getDatasetMeta(0).data[index];
                const x = bar.x;
                const descripcionBaja = descripcionesKostickBaja[chart.data.labels[index]] || chart.data.labels[index];
                const descripcionAlta = descripcionesKostickAlta[chart.data.labels[index]] || chart.data.labels[index];

                // Etiquetas INFERIORES (base)
                ctx.save();
                ctx.textBaseline = "top";
                ctx.translate(x - 3, baseY - 10);
                ctx.rotate(-Math.PI/2);
                ctx.fillText(descripcionBaja, 0, 0);
                ctx.restore();

                // Etiquetas SUPERIORES (tope)
                ctx.save();
                ctx.textBaseline = "bottom";
                ctx.translate(x - 3, topY + 10);
                ctx.rotate(Math.PI/2);
                ctx.fillText(descripcionAlta, 0, 0);
                ctx.restore();
              });
            });
            ctx.restore();

            // Dibujamos manualmente las líneas si no usamos el plugin de anotaciones
            const y40 = chart.scales.y.getPixelForValue(40);
            const y60 = chart.scales.y.getPixelForValue(60);
            const chartArea = chart.chartArea;

            ctx.save();
            ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.lineWidth = 2;
            ctx.setLineDash([6, 6]);

            // Línea en y=40
            ctx.beginPath();
            ctx.moveTo(chartArea.left, y40);
            ctx.lineTo(chartArea.right, y40);
            ctx.stroke();

            // Línea en y=60
            ctx.beginPath();
            ctx.moveTo(chartArea.left, y60);
            ctx.lineTo(chartArea.right, y60);
            ctx.stroke();

            ctx.restore();
          }
        }
      ]
    };
                   new Chart(ctx, config);
                   insertarInterpretacionKostick(valores, interpretaciones);
  } else if (prueba === "Personalidad 16 Factores (16 PF)") {
    const genero = <%- JSON.stringify(datos.genero) %>;

  document.getElementById("Interpretacion").innerHTML += `<div id="primarias"><strong>ESCALAS PRIMARIAS<br></strong></div>
  <div id="globales"><strong><br>FACTORES GLOBALES</strong><br></div>`;

  let DES = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  let niveles = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const adj1 = ["RETRAIDO", "LENTO", "INFANTIL", "SUMISO", "TACITURNO", "VARIABLE", "TIMIDO", "EMOCIONAL", "SOSPECHOSO", "EXCENTRICO", "SIMPLE", "INSEGURO", "RUTINARIO", "DEPENDIENTE", "DESCONTROLADO", "TENSO", "EXTRAVERSIÓN BAJA", "ANSIEDAD BAJA", "DUREZA BAJA", "INDEPENDENCIA BAJA", "AUTOCONTROL BAJO"];
  const adj2 = ["SOCIABLE", "RÁPIDO", "MADURO", "DOMINANTE", "ENTUSIASTA", "CONSTANTE", "AVENTURADO", "RACIONAL", "CONFIABLE", "CONVENCIONAL", "SOFISTICADO", "SEGURO DE SÍ", "INNOVADOR", "AUTOSUFICIENTE", "CONTROLADO", "ESTABLE", "EXTRAVERSIÓN ALTA", "ANSIEDAD ALTA", "DUREZA ALTA", "INDEPENDENCIA ALTA", "AUTOCONTROL ALTO"];
  let adj = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
  const letras = ['A', 'B', 'C', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O', 'Q1', 'Q2', 'Q3', 'Q4', 'EX', 'AX', 'TM', 'IN', 'SC'];

  if (genero == 'Mujer'){
    switch (true) {
      case valores.A < 7:
      DES[0] = 1;
      break;
      case valores.A < 9:
      DES[0] = 2;
      break;
      case valores.A < 12:
      DES[0] = 3;
      break;
      case valores.A < 14:
      DES[0] = 4;
      break;
      case valores.A < 16:
      DES[0] = 5;
      break;
      case valores.A < 18:
      DES[0] = 6;
      break;
      case valores.A < 20:
      DES[0] = 7;
      break;
      case valores.A < 21:
      DES[0] = 8;
      break;
      case valores.A < 22:
      DES[0] = 9;
      break;
      default:
      DES[0] = 10;
      break;
    }
    switch (true) {
      case valores.C < 4:
      DES[2] = 1;
      break;
      case valores.C < 7:
      DES[2] = 2;
      break;
      case valores.C < 10:
      DES[2] = 3;
      break;
      case valores.C < 13:
      DES[2] = 4;
      break;
      case valores.C < 16:
      DES[2] = 5;
      break;
      case valores.C < 18:
      DES[2] = 6;
      break;
      case valores.C < 19:
      DES[2] = 7;
      break;
      case valores.C < 21:
      DES[2] = 8;
      break;
      default:
      DES[2] = 9;
      break;
    }

    switch (true) {
      case valores.E < 4:
      DES[3] = 1;
      break;
      case valores.E < 6:
      DES[3] = 2;
      break;
      case valores.E < 8:
      DES[3] = 3;
      break;
      case valores.E < 11:
      DES[3] = 4;
      break;
      case valores.E < 14:
      DES[3] = 5;
      break;
      case valores.E < 16:
      DES[3] = 6;
      break;
      case valores.E < 18:
      DES[3] = 7;
      break;
      case valores.E < 19:
      DES[3] = 8;
      break;
      default:
      DES[3] = 9;
      break;
    }

    switch (true) {
      case valores.F < 4:
      DES[4] = 1;
      break;
      case valores.F < 6:
      DES[4] = 2;
      break;
      case valores.F < 9:
      DES[4] = 3;
      break;
      case valores.F < 12:
      DES[4] = 4;
      break;
      case valores.F < 14:
      DES[4] = 5;
      break;
      case valores.F < 16:
      DES[4] = 6;
      break;
      case valores.F < 18:
      DES[4] = 7;
      break;
      case valores.F < 19:
      DES[4] = 8;
      break;
      case valores.F < 20:
      DES[4] = 9;
      break;
      default:
      DES[4] = 10;
      break;
    }

    switch (true) {
      case valores.I < 4:
      DES[7] = 1;
      break;
      case valores.I < 7:
      DES[7] = 2;
      break;
      case valores.I < 9:
      DES[7] = 3;
      break;
      case valores.I < 12:
      DES[7] = 4;
      break;
      case valores.I < 14:
      DES[7] = 5;
      break;
      case valores.I < 17:
      DES[7] = 6;
      break;
      case valores.I < 19:
      DES[7] = 7;
      break;
      case valores.I < 21:
      DES[7] = 8;
      break;
      case valores.I < 22:
      DES[7] = 9;
      break;
      default:
      DES[7] = 10;
      break;
    }

    switch (true) {
      case valores.O < 4:
      DES[11] = 1;
      break;
      case valores.O < 5:
      DES[11] = 2;
      break;
      case valores.O < 7:
      DES[11] = 3;
      break;
      case valores.O < 10:
      DES[11] = 4;
      break;
      case valores.O < 13:
      DES[11] = 5;
      break;
      case valores.O < 16:
      DES[11] = 6;
      break;
      case valores.O < 18:
      DES[11] = 7;
      break;
      case valores.O < 20:
      DES[11] = 8;
      break;
      default:
      DES[11] = 9;
      break;
    }

    switch (true) {
      case valores.Q1 < 11:
      DES[12] = 1;
      break;
      case valores.Q1 < 14:
      DES[12] = 2;
      break;
      case valores.Q1 < 17:
      DES[12] = 3;
      break;
      case valores.Q1 < 20:
      DES[12] = 4;
      break;
      case valores.Q1 < 21:
      DES[12] = 5;
      break;
      case valores.Q1 < 22:
      DES[12] = 6;
      break;
      case valores.Q1 < 24:
      DES[12] = 7;
      break;
      case valores.Q1 < 26:
      DES[12] = 8;
      break;
      case valores.Q1 < 28:
      DES[12] = 9;
      break;
      default:
      DES[12] = 10;
      break;
    }

    switch (true) {
      case valores.Q4 < 2:
      DES[15] = 1;
      break;
      case valores.Q4 < 3:
      DES[15] = 2;
      break;
      case valores.Q4 < 5:
      DES[15] = 3;
      break;
      case valores.Q4 < 7:
      DES[15] = 4;
      break;
      case valores.Q4 < 10:
      DES[15] = 5;
      break;
      case valores.Q4 < 13:
      DES[15] = 6;
      break;
      case valores.Q4 < 16:
      DES[15] = 7;
      break;
      case valores.Q4 < 18:
      DES[15] = 8;
      break;
      case valores.Q4 < 20:
      DES[15] = 9;
      break;
      default:
      DES[15] = 10;
      break;
    }
  } else if (genero == 'Hombre'){
    switch (true) {
      case valores.A < 5:
      DES[0] = 1;
      break;
      case valores.A < 8:
      DES[0] = 2;
      break;
      case valores.A < 10:
      DES[0] = 3;
      break;
      case valores.A < 12:
      DES[0] = 4;
      break;
      case valores.A < 14:
      DES[0] = 5;
      break;
      case valores.A < 16:
      DES[0] = 6;
      break;
      case valores.A < 18:
      DES[0] = 7;
      break;
      case valores.A < 20:
      DES[0] = 8;
      break;
      case valores.A < 22:
      DES[0] = 9;
      break;
      default:
      DES[0] = 10;
      break;
    }
    switch (true) {
      case valores.C < 6:
      DES[2] = 1;
      break;
      case valores.C < 9:
      DES[2] = 2;
      break;
      case valores.C < 12:
      DES[2] = 3;
      break;
      case valores.C < 15:
      DES[2] = 4;
      break;
      case valores.C < 17:
      DES[2] = 5;
      break;
      case valores.C < 18:
      DES[2] = 6;
      break;
      case valores.C < 19:
      DES[2] = 7;
      break;
      case valores.C < 20:
      DES[2] = 8;
      break;
      default:
      DES[2] = 9;
      break;
    }

    switch (true) {
      case valores.E < 6:
      DES[3] = 1;
      break;
      case valores.E < 8:
      DES[3] = 2;
      break;
      case valores.E < 10:
      DES[3] = 3;
      break;
      case valores.E < 13:
      DES[3] = 4;
      break;
      case valores.E < 15:
      DES[3] = 5;
      break;
      case valores.E < 17:
      DES[3] = 6;
      break;
      case valores.E < 19:
      DES[3] = 7;
      break;
      case valores.E < 20:
      DES[3] = 8;
      break;
      default:
      DES[3] = 9;
      break;
    }

    switch (true) {
      case valores.F < 3:
      DES[4] = 1;
      break;
      case valores.F < 5:
      DES[4] = 2;
      break;
      case valores.F < 8:
      DES[4] = 3;
      break;
      case valores.F < 10:
      DES[4] = 4;
      break;
      case valores.F < 13:
      DES[4] = 5;
      break;
      case valores.F < 15:
      DES[4] = 6;
      break;
      case valores.F < 17:
      DES[4] = 7;
      break;
      case valores.F < 19:
      DES[4] = 8;
      break;
      case valores.F < 20:
      DES[4] = 9;
      break;
      default:
      DES[4] = 10;
      break;
    }

    switch (true) {
      case valores.I < 1:
      DES[7] = 1;
      break;
      case valores.I < 2:
      DES[7] = 2;
      break;
      case valores.I < 4:
      DES[7] = 3;
      break;
      case valores.I < 6:
      DES[7] = 4;
      break;
      case valores.I < 8:
      DES[7] = 5;
      break;
      case valores.I < 11:
      DES[7] = 6;
      break;
      case valores.I < 14:
      DES[7] = 7;
      break;
      case valores.I < 17:
      DES[7] = 8;
      break;
      case valores.I < 20:
      DES[7] = 9;
      break;
      default:
      DES[7] = 10;
      break;
    }

    switch (true) {
      case valores.O < 1:
      DES[11] = 1;
      break;
      case valores.O < 3:
      DES[11] = 2;
      break;
      case valores.O < 5:
      DES[11] = 3;
      break;
      case valores.O < 8:
      DES[11] = 4;
      break;
      case valores.O < 10:
      DES[11] = 5;
      break;
      case valores.O < 13:
      DES[11] = 6;
      break;
      case valores.O < 16:
      DES[11] = 7;
      break;
      case valores.O < 18:
      DES[11] = 8;
      break;
      case valores.O < 20:
      DES[11] = 9;
      break;
      default:
      DES[11] = 10;
      break;
    }

    switch (true) {
      case valores.Q1 < 10:
      DES[12] = 1;
      break;
      case valores.Q1 < 13:
      DES[12] = 2;
      break;
      case valores.Q1 < 15:
      DES[12] = 3;
      break;
      case valores.Q1 < 18:
      DES[12] = 4;
      break;
      case valores.Q1 < 21:
      DES[12] = 5;
      break;
      case valores.Q1 < 24:
      DES[12] = 6;
      break;
      case valores.Q1 < 26:
      DES[12] = 7;
      break;
      case valores.Q1 < 28:
      DES[12] = 8;
      break;
      default:
      DES[12] = 9;
      break;
    }

    switch (true) {
      case valores.Q4 < 1:
      DES[15] = 1;
      break;
      case valores.Q4 < 2:
      DES[15] = 2;
      break;
      case valores.Q4 < 3:
      DES[15] = 3;
      break;
      case valores.Q4 < 6:
      DES[15] = 4;
      break;
      case valores.Q4 < 9:
      DES[15] = 5;
      break;
      case valores.Q4 < 12:
      DES[15] = 6;
      break;
      case valores.Q4 < 15:
      DES[15] = 7;
      break;
      case valores.Q4 < 18:
      DES[15] = 8;
      break;
      case valores.Q4 < 20:
      DES[15] = 9;
      break;
      default:
      DES[15] = 10;
      break;
    }
  }

  switch (true) {
  case valores.B < 4:
  DES[1] = 1;
  break;
  case valores.B < 5:
  DES[1] = 2;
  break;
  case valores.B < 6:
  DES[1] = 3;
  break;
  case valores.B < 8:
  DES[1] = 4;
  break;
  case valores.B < 9:
  DES[1] = 5;
  break;
  case valores.B < 10:
  DES[1] = 6;
  break;
  case valores.B < 11:
  DES[1] = 7;
  break;
  case valores.B < 12:
  DES[1] = 8;
  break;
  case valores.B < 13:
  DES[1] = 9;
  break;
  default:
  DES[1] = 10;
  break;
  }

  switch (true) {
  case valores.G < 2:
  DES[5] = 1;
  break;
  case valores.G < 5:
  DES[5] = 2;
  break;
  case valores.G < 7:
  DES[5] = 3;
  break;
  case valores.G < 10:
  DES[5] = 4;
  break;
  case valores.G < 12:
  DES[5] = 5;
  break;
  case valores.G < 15:
  DES[5] = 6;
  break;
  case valores.G < 18:
  DES[5] = 7;
  break;
  case valores.G < 20:
  DES[5] = 8;
  break;
  case valores.G < 22:
  DES[5] = 9;
  break;
  default:
  DES[5] = 10;
  break;
  }

  switch (true) {
  case valores.H < 2:
  DES[6] = 2;
  break;
  case valores.H < 5:
  DES[6] = 3;
  break;
  case valores.H < 8:
  DES[6] = 4;
  break;
  case valores.H < 12:
  DES[6] = 5;
  break;
  case valores.H < 15:
  DES[6] = 6;
  break;
  case valores.H < 18:
  DES[6] = 7;
  break;
  case valores.H < 20:
  DES[6] = 8;
  break;
  default:
  DES[6] = 9;
  break;
  }

  switch (true) {
  case valores.L < 2:
  DES[8] = 1;
  break;
  case valores.L < 3:
  DES[8] = 2;
  break;
  case valores.L < 5:
  DES[8] = 3;
  break;
  case valores.L < 8:
  DES[8] = 4;
  break;
  case valores.L < 10:
  DES[8] = 5;
  break;
  case valores.L < 13:
  DES[8] = 6;
  break;
  case valores.L < 16:
  DES[8] = 7;
  break;
  case valores.L < 18:
  DES[8] = 8;
  break;
  case valores.L < 20:
  DES[8] = 9;
  break;
  default:
  DES[8] = 10;
  break;
  }

  switch (true) {
  case valores.M < 1:
  DES[9] = 2;
  break;
  case valores.M < 2:
  DES[9] = 3;
  break;
  case valores.M < 4:
  DES[9] = 4;
  break;
  case valores.M < 7:
  DES[9] = 5;
  break;
  case valores.M < 10:
  DES[9] = 6;
  break;
  case valores.M < 14:
  DES[9] = 7;
  break;
  case valores.M < 17:
  DES[9] = 8;
  break;
  case valores.M < 20:
  DES[9] = 9;
  break;
  default:
  DES[9] = 10;
  break;
  }

  switch (true) {
  case valores.N < 1:
  DES[10] = 1;
  break;
  case valores.N < 3:
  DES[10] = 2;
  break;
  case valores.N < 5:
  DES[10] = 3;
  break;
  case valores.N < 8:
  DES[10] = 4;
  break;
  case valores.N < 11:
  DES[10] = 5;
  break;
  case valores.N < 14:
  DES[10] = 6;
  break;
  case valores.N < 16:
  DES[10] = 7;
  break;
  case valores.N < 18:
  DES[10] = 8;
  break;
  case valores.N < 20:
  DES[10] = 9;
  break;
  default:
  DES[10] = 10;
  break;
  }

  switch (true) {
  case valores.Q2 < 1:
  DES[13] = 2;
  break;
  case valores.Q2 < 3:
  DES[13] = 3;
  break;
  case valores.Q2 < 5:
  DES[13] = 4;
  break;
  case valores.Q2 < 7:
  DES[13] = 5;
  break;
  case valores.Q2 < 10:
  DES[13] = 6;
  break;
  case valores.Q2 < 14:
  DES[13] = 7;
  break;
  case valores.Q2 < 17:
  DES[13] = 8;
  break;
  case valores.Q2 < 19:
  DES[13] = 9;
  break;
  default:
  DES[13] = 10;
  break;
  }

  switch (true) {
  case valores.Q3 < 3:
  DES[14] = 1;
  break;
  case valores.Q3 < 6:
  DES[14] = 2;
  break;
  case valores.Q3 < 9:
  DES[14] = 3;
  break;
  case valores.Q3 < 12:
  DES[14] = 4;
  break;
  case valores.Q3 < 15:
  DES[14] = 5;
  break;
  case valores.Q3 < 17:
  DES[14] = 6;
  break;
  case valores.Q3 < 19:
  DES[14] = 7;
  break;
  case valores.Q3 < 20:
  DES[14] = 8;
  break;
  default:
  DES[14] = 9;
  break;
  }

  let nivelIM = 0;
  switch (true) {
  case valores.IM < 6:
  nivelIM = 10;
  break;
  case valores.IM < 8:
  nivelIM = 20;
  break;
  case valores.IM < 10:
  nivelIM = 30;
  break;
  case valores.IM < 12:
  nivelIM = 40;
  break;
  case valores.IM < 15:
  nivelIM = 50;
  break;
  case valores.IM < 17:
  nivelIM = 60;
  break;
  case valores.IM < 19:
  nivelIM = 70;
  break;
  case valores.IM < 21:
  nivelIM = 80;
  break;
  case valores.IM < 23:
  nivelIM = 90;
  break;
  default:
  nivelIM = 100;
  break;
  }

  let percentil = 0;
  switch (true) {
  case valores.IM < 5:
  percentil = 1;
  break;
  case valores.IM == 5:
  percentil = 2;
  break;
  case valores.IM == 6:
  percentil = 4;
  break;
  case valores.IM == 7:
  percentil = 6;
  break;
  case valores.IM == 8:
  percentil = 9;
  break;
  case valores.IM == 9:
  percentil = 14;
  break;
  case valores.IM == 10:
  percentil = 19;
  break;
  case valores.IM == 11:
  percentil = 24;
  break;
  case valores.IM == 12:
  percentil = 31;
  break;
  case valores.IM == 13:
  percentil = 38;
  break;
  case valores.IM == 14:
  percentil = 46;
  break;
  case valores.IM == 15:
  percentil = 54;
  break;
  case valores.IM == 16:
  percentil = 62;
  break;
  case valores.IM == 17:
  percentil = 70;
  break;
  case valores.IM == 18:
  percentil = 78;
  break;
  case valores.IM == 19:
  percentil = 84;
  break;
  case valores.IM == 20:
  percentil = 90;
  break;
  case valores.IM == 21:
  percentil = 94;
  break;
  case valores.IM == 22:
  percentil = 97;
  break;
  default:
  percentil = 99;
  break;
  }

  DES[16] = Math.floor(4 + (DES[0] * 0.3) + (DES[4] * 0.3) + (DES[6] * 0.2) - (DES[10] * 0.3) - (DES[13] * 0.3));
  DES[17] = Math.floor(1.6 + (DES[8] * 0.3) + (DES[11] * 0.4) + (DES[15] * 0.4) - (DES[2] * 0.4));
  DES[18] = Math.floor(13.8 - (DES[0] * 0.2) - (DES[7] * 0.5) - (DES[9] * 0.3) - (DES[12] * 0.5));
  DES[19] = Math.floor((DES[3] * 0.6) + (DES[6] * 0.3) + (DES[8] * 0.2) + (DES[12] * 0.3) - 2.2);
  DES[20] = Math.floor(3.8 + (DES[5] * 0.4) + (DES[14] * 0.4) - (DES[4] * 0.2) - (DES[9] * 0.3));

  switch (true){
    case DES[0] < 4:
      niveles[0] = 1;
      adj[0] = adj1[0]
      break;
    case DES[0] < 6:
      niveles[0] = 2;
      break;
    default:
      niveles[0] = 3;
      adj[0] = adj2[0]
      break;
  }

  for (i = 1; i < 21; i++){
    switch (true){
      case DES[i] < 4:
        niveles[i] = 1;
        adj[i] = adj1[i];
        break;
      case DES[i] < 7:
        niveles[i] = 2;
        break;
      default:
        niveles[i] = 3;
        adj[i] = adj2[i];
        break;
    }
  }

  document.getElementById("IM").innerHTML += `IM: ${nivelIM}% <br>Percentil: ${percentil}`;

  for (let i = 0; i < 21; i++){
    if (niveles[i] != 2){
      fetch("../../interpretacion/" + letras[i] + "/" + niveles[i], {
        method: "GET",
      })
      .then((result) => result.json())
      .then((data) => {
          if (i < 16){
            document.getElementById("primarias").innerHTML += `${adj[i]}.- ${data.inter} <br>`;
          } else {
            document.getElementById("globales").innerHTML += `${adj[i]}.- ${data.inter} <br>`;
          }
      });
    }
  }


   data = {
    labels: [
      "A",
      "B",
      "C",
      "E",
      "F",
      "G",
      "H",
      "I",
      "L",
      "M",
      "N",
      "O",
      "Q1",
      "Q2",
      "Q3",
      "Q4",
    ],
    datasets: [
      {
        label: "Personalidad 16 Factores",
        data: DES.map(value => value * 10),
        backgroundColor: DES.map((value, index) => {
          if (index > 0) {
            return (value >= 4 && value < 7)
              ? "rgba(30, 144, 255, 0.7)"
              : "rgba(173, 216, 230, 0.7)";
          } else {
            return (value >= 4 && value < 6)
              ? "rgba(30, 144, 255, 0.7)"
              : "rgba(173, 216, 230, 0.7)";
          }
        }),
        borderColor: DES.map((value, index) => {
          if (index > 0) {
            return (value >= 4 && value < 7)
              ? "rgba(30, 144, 255, 0.7)"
              : "rgba(173, 216, 230, 0.7)";
          } else {
            return (value >= 4 && value < 6)
              ? "rgba(30, 144, 255, 0.7)"
              : "rgba(173, 216, 230, 0.7)";
          }
        }),
        borderWidth: 1,
      },
    ],
  };

  const config = {
    type: "bar",
    data: data,
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          title: {
            display: true,
            text: "Valores"
          }
        },
        x: {
          title: {
            display: true,
            text: "Factores"
          }
        }
      },
      plugins: {
        legend: {
            display: false,
          },
        tooltip: {
          callbacks: {
            label: function (context) {
              const valores = context.raw;
              return `${valores}%`;
            }
          }
        }
      }
    },
    plugins: [
      {
        id: 'etiquetasExtremos',
        afterDraw(chart) {
          const ctx = chart.ctx;
          const xAxis = chart.scales.x;
          const topY = chart.chartArea.top;
          const bottomY = chart.chartArea.bottom;

          ctx.save();
          ctx.font = "12px";
          ctx.fillStyle = "black";
          ctx.textAlign = "center";

          chart.data.labels.forEach((label, index) => {
            const x = xAxis.getPixelForTick(index);
            const labelHeight = 12;

            ctx.save();
            const labelWidth2 = ctx.measureText(adj2[index]).width;
            ctx.translate(x, topY - labelHeight);
            ctx.rotate(-Math.PI / 2);

            if (topY - labelHeight - labelWidth2 <= bottomY) {
              ctx.fillText(adj2[index], -(labelWidth2/2 + 15), 0);
            }

            ctx.restore();

            ctx.save();
            const labelWidth1 = ctx.measureText(adj1[index]).width;
            ctx.translate(x, bottomY + labelHeight);
            ctx.rotate(-Math.PI / 2);

            if (bottomY + labelHeight + labelWidth1 >= topY) {
              ctx.fillText(adj1[index], (labelWidth1/2 + 15), 0);
            }

            ctx.restore();
          });

            const y40 = chart.scales.y.getPixelForValue(39);
            const y60 = chart.scales.y.getPixelForValue(60);
            const chartArea = chart.chartArea;

            ctx.save();
            ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.lineWidth = 2;
            ctx.setLineDash([6, 6]);

            ctx.beginPath();
            ctx.moveTo(chartArea.left, y40 );
            ctx.lineTo(chartArea.right, y40);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(chartArea.left, y60);
            ctx.lineTo(chartArea.right, y60);
            ctx.stroke();

            ctx.restore();
        }
      }
    ]
  };


  const myChart = new Chart(document.getElementById("grafico16PF"), config);
  new Chart(ctx, config);

                   }
</script>

<%- include('includes/_footer')%>
